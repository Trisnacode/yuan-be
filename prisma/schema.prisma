generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

enum MemberGender{
  MALE
  FEMALE
}

model Member {
  id                    Int             @id @default(autoincrement())
  title                 String?
  name                  String?
  phone                 String          
  email                 String?
  password              String?

  gender                MemberGender?

  address               String?
  country               String?
  city                  String?

  birth_date            String?
  birth_place           String?          

  total_point_balance   Int?
  room_preference       String?
  food_preference       String?

  internal_preference   String?

  created_at            DateTime?       @default(now()) 
  updated_at            DateTime?       @default(now()) @updatedAt 
  deleted_at            DateTime?

  member_voucher        MemberVoucher[]
  transaction           Transaction[]
}

enum TransactionType{
  FRONT_OFFICE
  OUTLET
}

model Transaction {
  id                    Int              @id @default(autoincrement())
  invoice_number        String?
  total_value           Int?
  number_of_people      Int?
  tax                   Int?
  service               Int?
  discount              Int?
  split_number          Int?

  type                  TransactionType?

  check_in_at           DateTime?
  check_out_at          DateTime?

  member_id             Int?

  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @default(now()) @updatedAt
  deleted_at            DateTime?

  member                Member?         @relation(fields: [member_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  transaction_item      TransactionItem[]
}

model TransactionItem{
  id                    Int             @id @default(autoincrement())
  product_name          String?
  quantity              Int?
  price                 Int?
  ratecode              String?
  roomtype              String?

  transaction_id        Int

  created_at            DateTime?       @default(now()) 
  updated_at            DateTime?       @default(now()) @updatedAt
  deleted_at            DateTime?

  transaction           Transaction     @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

}

model Article {
  id                    Int             @id @default(autoincrement())
  title                 String?   
  description           String?

  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @default(now()) @updatedAt
  deleted_at            DateTime?

  voucher               Voucher[]
}

model Voucher {
  id                    Int             @id @default(autoincrement())
  code                  String?
  title                 String?
  description           String?

  amount                Int?
  discount              Int?
  minimum_spending      Int?

  article_id            Int?

  published             Boolean         @default(true)
  expired_at            DateTime?
  
  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @default(now()) @updatedAt
  deleted_at            DateTime?
  
  article               Article?        @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  member_voucher        MemberVoucher[]
}

model MemberVoucher {
  id                    Int             @id @default(autoincrement())
  code                  String?
  
  member_id             Int
  voucher_id            Int

  cashier_id            Int?

  is_active             Boolean         @default(true)

  burn_at               DateTime?
  expired_at            DateTime?
  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @default(now()) @updatedAt
  deleted_at            DateTime?

  member                Member          @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  voucher               Voucher         @relation(fields: [voucher_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
}

model Cashier {
  id                    Int             @id @default(autoincrement())
  name                  String?

  created_at            DateTime?       @default(now())
  updated_at            DateTime?       @default(now()) @updatedAt
  deleted_at            DateTime?

}